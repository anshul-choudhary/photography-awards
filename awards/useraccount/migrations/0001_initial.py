# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-04-30 14:38
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=50, unique=True)),
                ('user_id', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name=b'User ID')),
                ('firstname', models.CharField(blank=True, max_length=50, null=True)),
                ('lastname', models.CharField(blank=True, max_length=50, null=True)),
                ('businessname', models.CharField(blank=True, max_length=50, null=True)),
                ('instagram_link1', models.CharField(blank=True, max_length=200, null=True)),
                ('instagram_link2', models.CharField(blank=True, max_length=200, null=True)),
                ('state', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('address', models.TextField(blank=True, max_length=128, null=True)),
                ('primary_contact_number', models.CharField(max_length=15, unique=True)),
                ('secondary_contact_number', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.EmailField(blank=True, max_length=50, null=True, unique=True, verbose_name=b'email address')),
                ('dob', models.DateTimeField(blank=True, null=True, verbose_name=b'Date of Birth')),
                ('is_staff', models.BooleanField(default=False, help_text=b'Designates whether the user can log into this admin site.', verbose_name=b'staff status')),
                ('is_active', models.BooleanField(default=True, help_text=b'Designates whether this user should be treated as active.             Unselect this instead of deleting accounts.', verbose_name=b'active')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Created Date')),
                ('modified_date', models.DateTimeField(auto_now=True, verbose_name=b'Last Modified')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Country', verbose_name=b'Foreign Key Country')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'userprofile',
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Photographer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50, unique=True)),
                ('user_id', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name=b'User ID')),
                ('firstname', models.CharField(blank=True, max_length=50, null=True)),
                ('lastname', models.CharField(blank=True, max_length=50, null=True)),
                ('instagram_link1', models.CharField(blank=True, max_length=200, null=True)),
                ('instagram_link2', models.CharField(blank=True, max_length=200, null=True)),
                ('website_link', models.CharField(blank=True, max_length=100, null=True)),
                ('is_winner', models.BooleanField(default=False, help_text=b'Designates whether the user has won the award or not', verbose_name=b'Has been announced as a winner')),
                ('winning_date', models.DateTimeField(blank=True, null=True, verbose_name=b'Winning Date')),
                ('activate_home_page', models.BooleanField(default=False, help_text=b"Designates whether to show the photographer's profile on home page or not", verbose_name=b'If True, Profile will be seen on the home page')),
                ('priority', models.IntegerField(default=1, verbose_name=b'Home page profile visibility priority')),
                ('home_page_desc', models.TextField(blank=True, null=True)),
                ('image_1_desc', models.TextField(blank=True, null=True)),
                ('image_2_desc', models.TextField(blank=True, null=True)),
                ('image_3_desc', models.TextField(blank=True, null=True)),
                ('image_4_desc', models.TextField(blank=True, null=True)),
                ('image_5_desc', models.TextField(blank=True, null=True)),
                ('is_best_photographer', models.BooleanField(default=False, help_text=b"Designates whether to show the photographer's profile under best photographer section", verbose_name=b'If True, Profile will be seen under best phtotographer section')),
                ('best_photographer_desc', models.TextField(blank=True, null=True)),
                ('no_of_awards', models.SmallIntegerField(default=0, verbose_name=b'No of awards being won')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Created Date')),
                ('modified_date', models.DateTimeField(auto_now=True, verbose_name=b'Last Modified')),
                ('user_ref', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name=b'Foreign Key User Model')),
            ],
            options={
                'db_table': 'photographer',
                'verbose_name': 'Photographer',
                'verbose_name_plural': 'Photographers',
            },
        ),
        migrations.CreateModel(
            name='WinnerMonth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month_name', models.SmallIntegerField(blank=True, choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], help_text=b'Month in which photographer is announced as a winner', null=True)),
            ],
        ),
        migrations.AddField(
            model_name='photographer',
            name='winner_month',
            field=models.ManyToManyField(blank=True, null=True, to='useraccount.WinnerMonth'),
        ),
    ]
